{
  "about.title" : "About Me",
  "about": "I'm a Computer Engineering student and a dedicated Full-Stack Developer with hands-on experience in building web applications using React and Node.js. Over time, I’ve developed several projects that showcase my ability to work across both the front-end and back-end. I'm constantly learning and exploring new technologies in the field of computingto grow as a developer and deliver better solutions.",
  "nav-title": "Renan Costa - Computer Engineer",
  "nav-about": "About",
  "nav-projects": "Projects",
  "nav-contact": "Contact",
  "projects.title": "My jobs",

  "projects.1.title": "Corporate System – Embrapii/IFSMG",
  "projects.1.role": "Back-End Developer (2022–2023)",
  "projects.1.stack": "Node.js, TypeScript, Express.js, Docker, Swagger",
  "projects.1.desc": "Back-end development of a corporate application for Bayer, Cooxupé, and Quanticum. Used Swagger for documentation and Docker for containerization. Agile teamwork environment.",
  "projects.1.details": "Designed and implemented a set of REST endpoints for a multi-organization corporate system (Bayer, Cooxupé, Quanticum). Covered domain modeling, authentication and authorization (role-based access), pagination and filtering, input validation, consistent error handling and API versioning. Documented everything with OpenAPI/Swagger and containerized local/dev environments with Docker Compose. Collaborated in an agile team (planning, reviews, code reviews) and maintained release quality through incremental delivery and refactoring.",

  "projects.2.title": "Flutter App – NNT",
  "projects.2.role": "Mobile Developer (2023)",
  "projects.2.stack": "Flutter, Firebase",
  "projects.2.desc": "Contributed to the development of a mobile app from initial idea to MVP using Flutter and Firebase. Worked with agile methodology in a collaborative team.",
  "projects.2.details": "Built features from ideation to MVP in a Flutter app. Implemented screens, navigation and state management, integrated Firebase Authentication and Cloud Firestore, and handled form validation and error states. Focused on UX feedback (loading, empty states) and performance on low-end devices. Participated in agile ceremonies and collaborated closely with design and back-end.",

  "projects.3.title": "Front-End System – Embrapii/IFSMG",
  "projects.3.role": "Full-Stack Developer (2024)",
  "projects.3.stack": "React.js",
  "projects.3.desc": "Developed the front-end of a web system using React, focusing on reusable and modular components. Delivered features incrementally in an agile team.",
  "projects.3.details": "Developed a React frontend with reusable components and responsive layouts. Integrated with back-end APIs, implemented forms with client-side validation and controlled inputs, and paid attention to accessibility (semantics, keyboard navigation) and performance (code splitting, memoization). Helped define component structure and styling conventions to improve maintainability and delivery speed.",

  "highlighted.title": "Highlighted Projects",

  "highlighted.1.title": "upload-AI",
  "highlighted.1.description": "An application that uses the OpenAI API to automatically generate video descriptions and titles. Developed with React.js and Node.js.",
  "highlighted.1.language": "TypeScript",
  "highlighted.1.link": "https://github.com/renanzitoo/upload-AI",
  "highlighted.1.details": "Web app that takes a video, generates a transcript and uses prompt templates to create SEO-friendly titles and descriptions via OpenAI. Implemented the upload flow with progress feedback, background processing, and safeguards for timeouts/rate limits. Focused on a clean UI and fast iteration to test ideas quickly.",

  "highlighted.2.title": "TransactionsREST-API",
  "highlighted.2.description": "A RESTful API for managing financial transactions, with authentication and attributes like amount, type, and title.",
  "highlighted.2.language": "TypeScript",
  "highlighted.2.link": "https://github.com/renanzitoo/TransactionsREST-API",
  "highlighted.2.details": "REST API for personal finances: create, list and categorize transactions (amount, type, title), with authentication, pagination and filtering by period/type. Input validation and consistent error responses. Scripts and a Docker setup to run the API locally.",

  "highlighted.3.title": "challenge-01-nodeJS",
  "highlighted.3.description": "Ignite Node.js challenge: building a RESTful API to practice back-end fundamentals using JavaScript.",
  "highlighted.3.language": "JavaScript",
  "highlighted.3.link": "https://github.com/renanzitoo/challenge-01-nodeJS",
  "highlighted.3.details": "Educational Node.js challenge: build a REST API from scratch to practice routing, middleware, request validation and persistence. Emphasis on clean code, small commits and readable endpoints.",

  "highlighted.4.title": "market-api",
  "highlighted.4.description": "API for a fictional market, created for learning purposes about REST architecture and TypeScript.",
  "highlighted.4.language": "TypeScript",
  "highlighted.4.link": "https://github.com/renanzitoo/market-api",
  "highlighted.4.details": "Practice API that models a small market: products, customers and orders. CRUD endpoints, authentication and basic business rules (e.g., stock checks before checkout). Written in TypeScript following REST conventions.",

  "highlighted.5.title": "teste-tecnico-control361",
  "highlighted.5.description": "Technical test repository with a back-end application developed in TypeScript.",
  "highlighted.5.language": "TypeScript",
  "highlighted.5.link": "https://github.com/renanzitoo/teste-tecnico-control361",
  "highlighted.5.details": "Technical assessment under time constraints. Implemented the requested endpoints and business rules, keeping a clear folder structure and strict TypeScript types. Added concise documentation in the README to run and test the API.",

  "highlighted.6.title": "crud-examples",
  "highlighted.6.description": "Repository with examples of CRUD APIs in different languages, connected to a PostgreSQL database. Useful for learning and as a practical reference. Includes standardized .env files for easy setup.",
  "highlighted.6.language": "TypeScript",
  "highlighted.6.link": "https://github.com/renanzitoo/crud-examples",
  "highlighted.6.details": "Collection of CRUD examples across different stacks, all using PostgreSQL. Standardized .env files and Docker scripts to bootstrap the database quickly. Useful as a learning reference and as a starting point for new services.",
  
  "contact.title": "Get in Touch",
  "contact.description": "Feel free to reach out via email or visit my professional networks below."
}
